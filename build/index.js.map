{"version":3,"sources":["../src/index.js"],"names":["app","router","express","Router","use","bodyParser","json","mongoose","connect","process","env","MONGODB_URI","useNewUrlParser","connection","once","console","log","route","get","req","res","Song","find","sort","rank","limit","exec","err","issues","sid","RegExp","params","id","findOne","$or","issue","sortId","listen","PORT"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,GAAG,GAAG,uBAAZ;;AACA,IAAMC,MAAM,GAAGC,iBAAQC,MAAR,EAAf;;AAEAH,GAAG,CAACI,GAAJ,CAAQ,oBAAR;AACAJ,GAAG,CAACI,GAAJ,CAAQC,oBAAWC,IAAX,EAAR;;AAEAC,kBAASC,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,WAAZ,IAA2B,2BAA5C,EAAyE;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAzE;;AAEA,IAAMC,UAAU,GAAGN,kBAASM,UAA5B;AAEAA,UAAU,CAACC,IAAX,CAAgB,MAAhB,EAAwB,YAAM;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ;AACH,CAFD;AAMAf,MAAM,CAACgB,KAAP,CAAa,SAAb,EAAwBC,GAAxB,CAA4B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAEtCC,iBAAKC,IAAL,GAAYC,IAAZ,CAAiB;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAjB,EAA4BC,KAA5B,CAAkC,EAAlC,EAAsCC,IAAtC,CACI,UAASC,GAAT,EAAcC,MAAd,EAAsB;AAElB,QAAID,GAAJ,EACAZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,EADA,KAGAP,GAAG,CAACd,IAAJ,CAASsB,MAAT;AAEP,GARD;AASH,CAXD;AAaA3B,MAAM,CAACgB,KAAP,CAAa,aAAb,EAA4BC,GAA5B,CAAgC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAI3C,MAAIS,GAAG,GAAC,IAAIC,MAAJ,CAAWX,GAAG,CAACY,MAAJ,CAAWC,EAAtB,EAA0B,GAA1B,CAAR;;AAECX,iBAAKY,OAAL,CAAc;AAACC,IAAAA,GAAG,EAAE,CAAC;AAAC,cAAOL;AAAR,KAAD,EAAc;AAAC,iBAAUA;AAAX,KAAd;AAAN,GAAd,EAAsD,UAACF,GAAD,EAAMQ,KAAN,EAAgB;AAClE,QAAIR,GAAJ,EACIZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,EADJ,KAGIP,GAAG,CAACd,IAAJ,CAAS6B,KAAT;AACP,GALD;AAMH,CAZD;AAcAlC,MAAM,CAACgB,KAAP,CAAa,kBAAb,EAAiCC,GAAjC,CAAqC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAE/C,MAAIgB,MAAM,GAACjB,GAAG,CAACY,MAAJ,CAAWC,EAAtB;;AAEAX,iBAAKC,IAAL,GAAYC,IAAZ,qBAAmBa,MAAnB,EAA4B,CAA5B,GAAgCX,KAAhC,CAAsC,EAAtC,EAA0CC,IAA1C,CACI,UAASC,GAAT,EAAcC,MAAd,EAAsB;AAElB,QAAID,GAAJ,EACAZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,EADA,KAGAP,GAAG,CAACd,IAAJ,CAASsB,MAAT;AAEP,GARD;AAWH,CAfD;AAmBA5B,GAAG,CAACI,GAAJ,CAAQ,GAAR,EAAaH,MAAb;AAEAD,GAAG,CAACqC,MAAJ,CAAW5B,OAAO,CAACC,GAAR,CAAY4B,IAAZ,IAAmB,IAA9B,EAAoC;AAAA,SAAMvB,OAAO,CAACC,GAAR,uCAAN;AAAA,CAApC","sourcesContent":["import express from 'express';\r\nimport cors from 'cors';\r\nimport bodyParser from 'body-parser';\r\nimport mongoose from 'mongoose';\r\nimport Song from '../build/Issue';\r\n\r\nconst app = express();\r\nconst router = express.Router();\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\nmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost/songs', { useNewUrlParser: true });\r\n\r\nconst connection = mongoose.connection;\r\n\r\nconnection.once('open', () => {\r\n    console.log('MongoDB database connection established successfully!');\r\n});\r\n\r\n\r\n\r\nrouter.route('/issues').get((req, res) => {\r\n\r\n    Song.find().sort({rank: 1}).limit(50).exec( \r\n        function(err, issues) {\r\n\r\n            if (err)\r\n            console.log(err);\r\n        else\r\n            res.json(issues);\r\n\r\n    });\r\n});\r\n\r\nrouter.route('/issues/:id').get((req, res) => {\r\n\r\n \r\n\r\n   var sid=new RegExp(req.params.id, 'i');\r\n\r\n    Song.findOne( {$or: [{'name':sid},{'artists':sid}] }, (err, issue) => {\r\n        if (err)\r\n            console.log(err);\r\n        else\r\n            res.json(issue);\r\n    })\r\n});\r\n\r\nrouter.route('/sort/issues/:id').get((req, res) => {\r\n\r\n    var sortId=req.params.id;\r\n\r\n    Song.find().sort({[sortId]: 1}).limit(50).exec( \r\n        function(err, issues) {\r\n\r\n            if (err)\r\n            console.log(err);\r\n        else\r\n            res.json(issues);\r\n\r\n    });\r\n\r\n\r\n});\r\n\r\n\r\n\r\napp.use('/', router);\r\n\r\napp.listen(process.env.PORT ||4000, () => console.log(`Express server running on port 4000`));"],"file":"index.js"}